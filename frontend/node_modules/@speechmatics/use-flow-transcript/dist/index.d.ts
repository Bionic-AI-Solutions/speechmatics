import { AddTranscriptMessage, AddPartialTranscriptMessage, ResponseStartedMessage, ResponseCompletedMessage, ResponseInterruptedMessage, RecognitionResultAttachesToEnum, FlowClientIncomingMessage } from '@speechmatics/flow-client-react';
import { TypedEventTarget } from 'typescript-event-target';

type TranscriptUpdateMessage = AddTranscriptMessage | AddPartialTranscriptMessage | ResponseStartedMessage | ResponseCompletedMessage | ResponseInterruptedMessage;
type Word = {
    startTime: number;
    endTime: number;
    speaker: string;
    text: string;
    partial: boolean;
} & ({
    punctuation: false;
} | {
    punctuation: true;
    eos: boolean;
    attachesTo?: RecognitionResultAttachesToEnum;
});
type AgentResponse = {
    speaker: 'agent';
    agent: true;
    startTime: number;
    endTime?: number;
    text: string;
};
type TranscriptGroup = {
    type: 'speaker';
    speaker: string;
    data: Word[];
} | {
    type: 'agent';
    data: AgentResponse[];
};
declare class TranscriptUpdateEvent extends Event {
    readonly transcriptGroups: TranscriptGroup[];
    constructor(transcriptGroups: TranscriptGroup[], eventInitDict?: EventInit);
}
interface TranscriptManagerEvents {
    update: TranscriptUpdateEvent;
}

/**
 * Manages the state and processing of a real-time transcript
 * Handles both human speech transcription and AI agent responses
 * Uses EventTarget to notify listeners of updates
 *
 * Example usage:
 * ```ts
 * const transcriptManager = new TranscriptManager();
 *
 * // Listen for updates
 * transcriptManager.addEventListener('update', (event: TranscriptUpdateEvent) => {
 *   const transcriptGroups = event.transcriptGroups;
 *   // Handle updated transcript groups
 * });
 *
 * // Process incoming messages
 * transcriptManager.handleMessage({
 *   message: 'AddTranscript',
 *   results: [
 *     // message data
 *   ]
 * });
 */
declare class TranscriptManager extends TypedEventTarget<TranscriptManagerEvents> {
    private finals;
    private partials;
    private agentResponses;
    /**
     * Clears all transcript data and notifies listeners
     */
    clearTranscripts(): void;
    /**
     * Main entry point for processing incoming messages
     * Routes different message types to their appropriate handlers
     */
    handleMessage(message: FlowClientIncomingMessage): void;
    private processMessage;
    /**
     * Processes partial transcripts (in-progress speech)
     * These are temporary and will be replaced by final transcripts
     */
    private handlePartialTranscript;
    /**
     * Processes final transcripts
     * Also handles cleanup of related partial transcripts
     */
    private handleTranscript;
    /**
     * Handles the start of an AI agent response
     * Creates a new agent response entry with start time
     */
    private handleAgentResponseStart;
    /**
     * Handles the completion or interruption of an AI agent response
     * Updates the existing response or creates a new one if not found
     */
    private handleAgentResponseEnd;
    /**
     * Converts raw message results into Word objects
     * Handles both regular words and punctuation
     */
    private getWords;
    /**
     * Generates the current state of the transcript
     * Groups words and responses by speaker and chronological order
     */
    getTranscriptGroups(): TranscriptGroup[];
    /**
     * Groups words into sentences based on punctuation and end-of-sentence markers
     */
    private getSentences;
    /**
     * Notifies listeners of updates to the transcript
     * Dispatches a CustomEvent with the current transcript groups
     */
    private notifyUpdate;
}
declare function transcriptGroupKey(group: TranscriptGroup): string;

/**
 * A hook that returns the current transcript groups for a Flow session.
 *
 * Must only be called in a component which is a child of a {@link FlowProvider}.
 *
 * @returns The current transcript groups for the Flow session.
 *
 * @example
 *
 * ```tsx
 * import { useFlowTranscript, transcriptGroupKey, wordsToText } from '@speechmatics/use-flow-transcript';
 *
 * const transcriptGroups = useFlowTranscript();
 *
 * return (
 *  <div>
 *    {transcriptGroups.map((group) => (
 *      <div key={transcriptGroupKey(group)}>
 *        {group.type === 'speaker' ? (
 *          <span>{wordsToText(group.data)}</span>
 *        ) : (
 *          <span>
 *              {group.data.map((response) => response.text).join(' ')}
 *          </span>
 *        )}
 *      </div>
 *    ))}
 *  </div>
 * )
 * ```
 */
declare function useFlowTranscript(): TranscriptGroup[];

/**
 * Utility function to convert an array of words into readable text
 * Handles spacing between words and punctuation
 */
declare function wordsToText(words: readonly Word[]): string;

export { type AgentResponse, type TranscriptGroup, TranscriptManager, type TranscriptManagerEvents, TranscriptUpdateEvent, type TranscriptUpdateMessage, type Word, transcriptGroupKey, useFlowTranscript, wordsToText };
