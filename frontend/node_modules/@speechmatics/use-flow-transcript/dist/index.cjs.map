{"version":3,"file":"index.cjs","sources":["../src/types.ts","../src/transcript-manager.ts","../src/use-flow-transcript.ts","../src/words-to-text.ts"],"sourcesContent":["import type {\n  AddPartialTranscriptMessage,\n  AddTranscriptMessage,\n  RecognitionResultAttachesToEnum,\n  ResponseCompletedMessage,\n  ResponseInterruptedMessage,\n  ResponseStartedMessage,\n} from '@speechmatics/flow-client-react';\n\nexport type TranscriptUpdateMessage =\n  | AddTranscriptMessage\n  | AddPartialTranscriptMessage\n  | ResponseStartedMessage\n  | ResponseCompletedMessage\n  | ResponseInterruptedMessage;\n\nexport type Word = {\n  startTime: number;\n  endTime: number;\n  speaker: string;\n  text: string;\n  partial: boolean;\n} & (\n  | { punctuation: false }\n  | {\n      punctuation: true;\n      eos: boolean;\n      attachesTo?: RecognitionResultAttachesToEnum;\n    }\n);\n\nexport type AgentResponse = {\n  speaker: 'agent';\n  agent: true;\n  startTime: number;\n  endTime?: number;\n  text: string;\n};\n\nexport type TranscriptGroup =\n  | {\n      type: 'speaker';\n      speaker: string;\n      data: Word[];\n    }\n  | {\n      type: 'agent';\n      data: AgentResponse[];\n    };\n\nexport class TranscriptUpdateEvent extends Event {\n  constructor(\n    public readonly transcriptGroups: TranscriptGroup[],\n    eventInitDict?: EventInit,\n  ) {\n    super('update', eventInitDict);\n  }\n}\n\nexport interface TranscriptManagerEvents {\n  update: TranscriptUpdateEvent;\n}\n","import type {\n  AddPartialTranscriptMessage,\n  AddTranscriptMessage,\n  FlowClientIncomingMessage,\n  ResponseCompletedMessage,\n  ResponseInterruptedMessage,\n  ResponseStartedMessage,\n} from '@speechmatics/flow-client-react';\nimport { TypedEventTarget } from 'typescript-event-target';\nimport {\n  type TranscriptUpdateMessage,\n  type Word,\n  type AgentResponse,\n  type TranscriptGroup,\n  type TranscriptManagerEvents,\n  TranscriptUpdateEvent,\n} from './types';\n\n/**\n * Manages the state and processing of a real-time transcript\n * Handles both human speech transcription and AI agent responses\n * Uses EventTarget to notify listeners of updates\n *\n * Example usage:\n * ```ts\n * const transcriptManager = new TranscriptManager();\n *\n * // Listen for updates\n * transcriptManager.addEventListener('update', (event: TranscriptUpdateEvent) => {\n *   const transcriptGroups = event.transcriptGroups;\n *   // Handle updated transcript groups\n * });\n *\n * // Process incoming messages\n * transcriptManager.handleMessage({\n *   message: 'AddTranscript',\n *   results: [\n *     // message data\n *   ]\n * });\n */\nexport class TranscriptManager extends TypedEventTarget<TranscriptManagerEvents> {\n  // Store final transcribed words\n  private finals: Word[] = [];\n  // Store partial (in-progress) transcribed words\n  private partials: Word[] = [];\n  // Store AI agent responses\n  private agentResponses: AgentResponse[] = [];\n\n  /**\n   * Clears all transcript data and notifies listeners\n   */\n  public clearTranscripts(): void {\n    this.finals = [];\n    this.partials = [];\n    this.agentResponses = [];\n    this.notifyUpdate();\n  }\n\n  /**\n   * Main entry point for processing incoming messages\n   * Routes different message types to their appropriate handlers\n   */\n  handleMessage(message: FlowClientIncomingMessage) {\n    // Only process messages we care about\n    switch (message.message) {\n      case 'AddPartialTranscript':\n      case 'AddTranscript':\n      case 'ResponseStarted':\n      case 'ResponseCompleted':\n      case 'ResponseInterrupted':\n        this.processMessage(message);\n        break;\n      // Ignore other message types\n      default:\n        return;\n    }\n  }\n\n  private processMessage(message: TranscriptUpdateMessage) {\n    switch (message.message) {\n      case 'AddPartialTranscript':\n        this.handlePartialTranscript(message);\n        break;\n      case 'AddTranscript':\n        this.handleTranscript(message);\n        break;\n      case 'ResponseStarted':\n        this.handleAgentResponseStart(message);\n        break;\n      case 'ResponseCompleted':\n      case 'ResponseInterrupted':\n        this.handleAgentResponseEnd(message);\n        break;\n    }\n  }\n\n  /**\n   * Processes partial transcripts (in-progress speech)\n   * These are temporary and will be replaced by final transcripts\n   */\n  private handlePartialTranscript(message: AddPartialTranscriptMessage) {\n    if (!message.results?.length) return;\n    this.partials = this.getWords(message);\n    this.notifyUpdate();\n  }\n\n  /**\n   * Processes final transcripts\n   * Also handles cleanup of related partial transcripts\n   */\n  private handleTranscript(message: AddTranscriptMessage) {\n    if (!message.results?.length) return;\n    const incomingWords = this.getWords(message);\n    this.finals = [...this.finals, ...incomingWords];\n\n    // Remove any partial transcripts that have been finalized\n    const resultsEndAt = incomingWords[incomingWords.length - 1].endTime;\n    this.partials = this.partials.filter(\n      (p) => p.startTime >= resultsEndAt && p.endTime > resultsEndAt,\n    );\n\n    // Special handling for end-of-sentence punctuation\n    if (\n      this.partials.length &&\n      message.results[0].is_eos &&\n      this.partials[0].punctuation &&\n      this.partials[0].eos\n    ) {\n      this.partials.shift();\n    }\n\n    this.notifyUpdate();\n  }\n\n  /**\n   * Handles the start of an AI agent response\n   * Creates a new agent response entry with start time\n   */\n  private handleAgentResponseStart(message: ResponseStartedMessage) {\n    if (!message.content || !message.start_time) return;\n\n    this.agentResponses.push({\n      speaker: 'agent',\n      agent: true,\n      startTime: message.start_time,\n      text: message.content,\n    });\n\n    this.notifyUpdate();\n  }\n\n  /**\n   * Handles the completion or interruption of an AI agent response\n   * Updates the existing response or creates a new one if not found\n   */\n  private handleAgentResponseEnd(\n    message: ResponseCompletedMessage | ResponseInterruptedMessage,\n  ) {\n    if (!message.content || !message.start_time || !message.end_time) return;\n\n    const existingIndex = this.agentResponses.findIndex(\n      (r) => r.startTime === message.start_time,\n    );\n\n    const updatedResponse = {\n      speaker: 'agent' as const,\n      agent: true as const,\n      startTime: message.start_time,\n      endTime: message.end_time,\n      text: message.content,\n    };\n\n    if (existingIndex !== -1) {\n      this.agentResponses[existingIndex] = updatedResponse;\n    } else {\n      this.agentResponses.push(updatedResponse);\n    }\n\n    this.notifyUpdate();\n  }\n\n  /**\n   * Converts raw message results into Word objects\n   * Handles both regular words and punctuation\n   */\n  private getWords(\n    message: Exclude<\n      TranscriptUpdateMessage,\n      | ResponseStartedMessage\n      | ResponseCompletedMessage\n      | ResponseInterruptedMessage\n    >,\n  ): Word[] {\n    if (!message.results) return [];\n\n    return message.results.map((r) => {\n      const word = {\n        startTime: r.start_time,\n        endTime: r.end_time,\n        text: r.alternatives?.[0]?.content ?? '',\n        speaker: r.alternatives?.[0]?.speaker ?? 'UU', // UU = Unknown User\n        partial: message.message === 'AddPartialTranscript',\n      };\n\n      if (r.type === 'punctuation') {\n        return {\n          ...word,\n          punctuation: true,\n          eos: r.is_eos ?? false,\n          attachesTo: r.attaches_to,\n        };\n      }\n      return { ...word, punctuation: false };\n    });\n  }\n\n  /**\n   * Generates the current state of the transcript\n   * Groups words and responses by speaker and chronological order\n   */\n  getTranscriptGroups(): TranscriptGroup[] {\n    const sentences = this.getSentences();\n    const sentencesAndResponses = [...sentences, ...this.agentResponses];\n\n    // Sort everything by start time\n    sentencesAndResponses.sort((a, b) => {\n      const startTimeA = 'agent' in a ? a.startTime : a[0].startTime;\n      const startTimeB = 'agent' in b ? b.startTime : b[0].startTime;\n      return startTimeA - startTimeB;\n    });\n\n    const allSorted = sentencesAndResponses.flat();\n    const groups: TranscriptGroup[] = [];\n    let currentGroup: TranscriptGroup | undefined;\n\n    // Group consecutive items from the same speaker together\n    for (const wordOrResponse of allSorted) {\n      if (!currentGroup) {\n        currentGroup =\n          'agent' in wordOrResponse\n            ? {\n                type: 'agent',\n                data: [wordOrResponse],\n              }\n            : {\n                type: 'speaker',\n                data: [wordOrResponse],\n                speaker: wordOrResponse.speaker,\n              };\n        continue;\n      }\n\n      if (currentGroup.type === 'agent' && 'agent' in wordOrResponse) {\n        currentGroup.data.push(wordOrResponse);\n      } else if (\n        currentGroup.type === 'speaker' &&\n        !('agent' in wordOrResponse) &&\n        wordOrResponse.speaker === currentGroup.speaker\n      ) {\n        currentGroup.data.push(wordOrResponse);\n      } else {\n        groups.push(currentGroup);\n        currentGroup =\n          'agent' in wordOrResponse\n            ? { type: 'agent', data: [wordOrResponse] }\n            : {\n                type: 'speaker',\n                data: [wordOrResponse],\n                speaker: wordOrResponse.speaker,\n              };\n      }\n    }\n\n    if (currentGroup) {\n      groups.push(currentGroup);\n    }\n\n    return groups;\n  }\n\n  /**\n   * Groups words into sentences based on punctuation and end-of-sentence markers\n   */\n  private getSentences(): Word[][] {\n    const sentences: Word[][] = [];\n    let currentSentence: Word[] = [];\n\n    for (const word of [...this.finals, ...this.partials]) {\n      currentSentence.push(word);\n      if (word.punctuation && word.eos) {\n        sentences.push(currentSentence);\n        currentSentence = [];\n      }\n    }\n\n    if (currentSentence.length) {\n      sentences.push(currentSentence);\n    }\n\n    return sentences;\n  }\n\n  /**\n   * Notifies listeners of updates to the transcript\n   * Dispatches a CustomEvent with the current transcript groups\n   */\n  private notifyUpdate() {\n    this.dispatchTypedEvent(\n      'update',\n      new TranscriptUpdateEvent(this.getTranscriptGroups()),\n    );\n  }\n}\n\nexport function transcriptGroupKey(group: TranscriptGroup): string {\n  return `${group.type}-${\n    group.type === 'agent' ? group.data[0].startTime : group.data[0].startTime\n  }-${group.type === 'speaker' ? group.speaker : 'agent'}`;\n}\n\nexport default TranscriptManager;\n","import {\n  useFlow,\n  useFlowEventListener,\n  type FlowProvider,\n} from '@speechmatics/flow-client-react';\nimport { useState, useMemo, useEffect } from 'react';\nimport TranscriptManager from './transcript-manager';\nimport type { TranscriptGroup, TranscriptUpdateEvent } from './types';\n\n/**\n * A hook that returns the current transcript groups for a Flow session.\n *\n * Must only be called in a component which is a child of a {@link FlowProvider}.\n *\n * @returns The current transcript groups for the Flow session.\n *\n * @example\n *\n * ```tsx\n * import { useFlowTranscript, transcriptGroupKey, wordsToText } from '@speechmatics/use-flow-transcript';\n *\n * const transcriptGroups = useFlowTranscript();\n *\n * return (\n *  <div>\n *    {transcriptGroups.map((group) => (\n *      <div key={transcriptGroupKey(group)}>\n *        {group.type === 'speaker' ? (\n *          <span>{wordsToText(group.data)}</span>\n *        ) : (\n *          <span>\n *              {group.data.map((response) => response.text).join(' ')}\n *          </span>\n *        )}\n *      </div>\n *    ))}\n *  </div>\n * )\n * ```\n */\nexport function useFlowTranscript() {\n  const [transcriptGroups, setTranscriptGroups] = useState<TranscriptGroup[]>(\n    [],\n  );\n  const { sessionId } = useFlow();\n\n  const transcriptManager = useMemo(() => new TranscriptManager(), []);\n\n  // Clear transcripts when session changes\n  useEffect(() => {\n    if (sessionId) {\n      transcriptManager.clearTranscripts();\n    }\n  }, [sessionId, transcriptManager]);\n\n  useEffect(() => {\n    const handleUpdate = (event: TranscriptUpdateEvent) => {\n      setTranscriptGroups(event.transcriptGroups);\n    };\n\n    transcriptManager.addEventListener('update', handleUpdate);\n    return () => {\n      transcriptManager.removeEventListener('update', handleUpdate);\n    };\n  }, [transcriptManager]);\n\n  useFlowEventListener('message', ({ data }) => {\n    transcriptManager.handleMessage(data);\n  });\n\n  return transcriptGroups;\n}\n","import type { Word } from './types';\n\n/**\n * Utility function to convert an array of words into readable text\n * Handles spacing between words and punctuation\n */\nexport function wordsToText(words: readonly Word[]): string {\n  return words.reduce(\n    (text, word) =>\n      `${text}${words.indexOf(word) > 0 && !word.punctuation ? ' ' : ''}${word.text}`,\n    '',\n  );\n}\n"],"names":["TypedEventTarget","useState","useFlow","useMemo","useEffect","useFlowEventListener"],"mappings":"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"}