{"version":3,"file":"use-flow-transcript.js","sources":["../src/use-flow-transcript.ts"],"sourcesContent":["import {\n  useFlow,\n  useFlowEventListener,\n  type FlowProvider,\n} from '@speechmatics/flow-client-react';\nimport { useState, useMemo, useEffect } from 'react';\nimport TranscriptManager from './transcript-manager';\nimport type { TranscriptGroup, TranscriptUpdateEvent } from './types';\n\n/**\n * A hook that returns the current transcript groups for a Flow session.\n *\n * Must only be called in a component which is a child of a {@link FlowProvider}.\n *\n * @returns The current transcript groups for the Flow session.\n *\n * @example\n *\n * ```tsx\n * import { useFlowTranscript, transcriptGroupKey, wordsToText } from '@speechmatics/use-flow-transcript';\n *\n * const transcriptGroups = useFlowTranscript();\n *\n * return (\n *  <div>\n *    {transcriptGroups.map((group) => (\n *      <div key={transcriptGroupKey(group)}>\n *        {group.type === 'speaker' ? (\n *          <span>{wordsToText(group.data)}</span>\n *        ) : (\n *          <span>\n *              {group.data.map((response) => response.text).join(' ')}\n *          </span>\n *        )}\n *      </div>\n *    ))}\n *  </div>\n * )\n * ```\n */\nexport function useFlowTranscript() {\n  const [transcriptGroups, setTranscriptGroups] = useState<TranscriptGroup[]>(\n    [],\n  );\n  const { sessionId } = useFlow();\n\n  const transcriptManager = useMemo(() => new TranscriptManager(), []);\n\n  // Clear transcripts when session changes\n  useEffect(() => {\n    if (sessionId) {\n      transcriptManager.clearTranscripts();\n    }\n  }, [sessionId, transcriptManager]);\n\n  useEffect(() => {\n    const handleUpdate = (event: TranscriptUpdateEvent) => {\n      setTranscriptGroups(event.transcriptGroups);\n    };\n\n    transcriptManager.addEventListener('update', handleUpdate);\n    return () => {\n      transcriptManager.removeEventListener('update', handleUpdate);\n    };\n  }, [transcriptManager]);\n\n  useFlowEventListener('message', ({ data }) => {\n    transcriptManager.handleMessage(data);\n  });\n\n  return transcriptGroups;\n}\n"],"names":[],"mappings":";;;;;AAwCO;AACL;AAAgD;AAC7C;AAEH;AAEA;AAGA;AACE;AACE;AAAmC;AACrC;AAGF;AACE;AACE;AAA0C;AAG5C;AACA;AACE;AAA4D;AAC9D;AAGF;AACE;AAAoC;AAGtC;AACF;;"}