{"version":3,"file":"flow-provider.js","sources":["../src/flow-provider.tsx"],"sourcesContent":["'use client';\n\nimport { FlowClient, type FlowClientOptions } from '@speechmatics/flow-client';\nimport { useMemo, useState, useSyncExternalStore } from 'react';\nimport { FlowContext } from './flow-context';\nimport { useClientEventListener } from './use-flow-event-listener';\n\nexport function FlowProvider({\n  server,\n  children,\n  ...options\n}: React.PropsWithChildren<\n  {\n    server?: string;\n  } & FlowClientOptions\n>) {\n  const [client] = useState(() => {\n    return new FlowClient(server ?? 'wss://flow.api.speechmatics.com', options);\n  });\n\n  const socketState = useClientSocketState(client);\n  const [sessionId, setSessionId] = useState<string>();\n\n  useClientEventListener(client, 'message', ({ data }) => {\n    if (data.message === 'Error') {\n      console.error(data);\n    } else if (data.message === 'ConversationStarted') {\n      setSessionId(data.asr_session_id);\n    }\n  });\n\n  useClientEventListener(client, 'socketClose', () => {\n    setSessionId(undefined);\n  });\n\n  const value = useMemo(\n    () => ({\n      client,\n      socketState,\n      sessionId,\n    }),\n    [client, socketState, sessionId],\n  );\n\n  return <FlowContext.Provider value={value}>{children}</FlowContext.Provider>;\n}\n\nconst SOCKET_EVENTS = [\n  'socketInitialized',\n  'socketOpen',\n  'socketClosing',\n  'socketClose',\n  'socketError',\n] as const;\n\nfunction useClientSocketState(client: FlowClient) {\n  const subscribe = (onChange: () => void) => {\n    for (const e of SOCKET_EVENTS) {\n      client.addEventListener(e, onChange);\n    }\n    return () => {\n      for (const e of SOCKET_EVENTS) {\n        client.removeEventListener(e, onChange);\n      }\n    };\n  };\n\n  const getSnapshot = () => client.socketState;\n  return useSyncExternalStore(subscribe, getSnapshot, getSnapshot);\n}\n"],"names":[],"mappings":";;;;;;;;AAOO;AAAsB;AAC3B;AACA;AAEF;AAKE;AACE;AAA0E;AAG5E;AACA;AAEA;AACE;AACE;AAAkB;AAElB;AAAgC;AAClC;AAGF;AACE;AAAsB;AAGxB;AAAc;AACL;AACL;AACA;AACA;AACF;AAC+B;AAGjC;AACF;AAEA;AAAsB;AACpB;AACA;AACA;AACA;AAEF;AAEA;AACE;AACE;AACE;AAAmC;AAErC;AACE;AACE;AAAsC;AACxC;AACF;AAGF;AACA;AACF;;"}