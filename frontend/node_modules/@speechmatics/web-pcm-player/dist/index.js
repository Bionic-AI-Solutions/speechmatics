import { TypedEventTarget } from 'typescript-event-target';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
const VOLUME_CHANGE = "volumeChange";
class VolumeChangeEvent extends Event {
  constructor(volume) {
    super(VOLUME_CHANGE);
    this.volume = volume;
  }
}
class PCMPlayer extends TypedEventTarget {
  constructor(audioContext) {
    super();
    this.audioContext = audioContext;
    __publicField(this, "playbackTime", 0);
    __publicField(this, "gainNode");
    this.gainNode = this.audioContext.createGain();
    this.gainNode.connect(this.audioContext.destination);
  }
  playAudio(data) {
    if (this.audioContext.state !== "running") {
      console.warn(`Audio context is in ${this.audioContext.state} state`);
      return;
    }
    const float32Array = data instanceof Int16Array ? pcm16ToFloat32(data) : data;
    const audioBuffer = this.audioContext.createBuffer(
      1,
      float32Array.length,
      this.audioContext.sampleRate
    );
    audioBuffer.copyToChannel(float32Array, 0);
    const source = this.audioContext.createBufferSource();
    source.buffer = audioBuffer;
    const currentTime = this.audioContext.currentTime;
    if (this.playbackTime < currentTime) {
      this.playbackTime = currentTime;
    }
    source.connect(this.gainNode);
    source.start(this.playbackTime);
    this.playbackTime += audioBuffer.duration;
  }
  get volumePercentage() {
    return this.gainNode.gain.value * 100;
  }
  set volumePercentage(percentage) {
    this.gainNode.gain.value = percentage / 100;
    this.dispatchTypedEvent(VOLUME_CHANGE, new VolumeChangeEvent(percentage));
  }
}
const pcm16ToFloat32 = (pcm16) => {
  const float32 = new Float32Array(pcm16.length);
  for (let i = 0; i < pcm16.length; i++) {
    float32[i] = pcm16[i] / 32768;
  }
  return float32;
};

export { PCMPlayer, VolumeChangeEvent };
