var u=class extends EventTarget{dispatchTypedEvent(t,e){return super.dispatchEvent(e)}},h=Object.defineProperty,l=(t,e,a)=>e in t?h(t,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[e]=a,s=(t,e,a)=>l(t,typeof e!="symbol"?e+"":e,a);const r="volumeChange";class c extends Event{constructor(e){super(r),this.volume=e}}class d extends u{constructor(e){super(),this.audioContext=e,s(this,"playbackTime",0),s(this,"gainNode"),this.gainNode=this.audioContext.createGain(),this.gainNode.connect(this.audioContext.destination)}playAudio(e){if(this.audioContext.state!=="running"){console.warn(`Audio context is in ${this.audioContext.state} state`);return}const a=e instanceof Int16Array?g(e):e,n=this.audioContext.createBuffer(1,a.length,this.audioContext.sampleRate);n.copyToChannel(a,0);const i=this.audioContext.createBufferSource();i.buffer=n;const o=this.audioContext.currentTime;this.playbackTime<o&&(this.playbackTime=o),i.connect(this.gainNode),i.start(this.playbackTime),this.playbackTime+=n.duration}get volumePercentage(){return this.gainNode.gain.value*100}set volumePercentage(e){this.gainNode.gain.value=e/100,this.dispatchTypedEvent(r,new c(e))}}const g=t=>{const e=new Float32Array(t.length);for(let a=0;a<t.length;a++)e[a]=t[a]/32768;return e};export{d as PCMPlayer,c as VolumeChangeEvent};
