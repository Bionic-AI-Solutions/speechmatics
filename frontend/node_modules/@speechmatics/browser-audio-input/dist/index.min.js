(function(s,r){typeof exports=="object"&&typeof module<"u"?r(exports):typeof define=="function"&&define.amd?define(["exports"],r):(s=typeof globalThis<"u"?globalThis:s||self,r(s.BrowserAudioInput={}))})(this,function(s){var r=class extends EventTarget{dispatchTypedEvent(t,e){return super.dispatchEvent(e)}},y=Object.defineProperty,k=(t,e,i)=>e in t?y(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i,d=(t,e,i)=>k(t,typeof e!="symbol"?e+"":e,i);class u extends r{constructor(){super(),d(this,"_permissionState","prompt"),d(this,"_devices",[]),d(this,"updateDeviceList",async e=>{const i=navigator.userAgent.search("Firefox")>0;if(e&&i){await navigator.mediaDevices.enumerateDevices();try{const n=await navigator.mediaDevices.getUserMedia({audio:!0,video:!1});for(const D of n.getTracks())D.stop()}catch{throw new Error("Tried to create media stream but it didn't work")}}const o=(await navigator.mediaDevices.enumerateDevices()).filter(n=>n.kind==="audioinput"&&n.deviceId!=="");this.devices=o}),!(typeof window>"u")&&(this.updateDeviceList(),navigator.mediaDevices.addEventListener("devicechange",()=>{this.updateDeviceList()}),navigator.permissions.query({name:"microphone"}).then(e=>{this.permissionState=e.state,e.addEventListener("change",()=>{this.permissionState=e.state})}).catch(e=>{console.warn("browser does not support microphone permissions query")}),this.addEventListener("changePermissions",()=>{this.permissionState==="granted"&&this.updateDeviceList(!0)}))}get permissionState(){return this._permissionState}set permissionState(e){this._permissionState=e,this.dispatchTypedEvent("changePermissions",new Event("changePermissions"))}get devices(){return this._devices}set devices(e){e!==this._devices&&(this._devices=e,this.dispatchTypedEvent("changeDevices",new Event("changeDevices")))}async promptPermissions(){if(this.permissionState!=="prompt")return;this.permissionState="prompting";let e=null;try{e=await navigator.mediaDevices.getUserMedia({audio:!0,video:!1}),e&&(this.permissionState="granted")}catch{this.permissionState="denied"}finally{if(e)for(const i of e.getTracks())i.stop()}}}let c=null;function x(){return c??(c=new u),c}var C=Object.defineProperty,N=(t,e,i)=>e in t?C(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i,a=(t,e,i)=>N(t,typeof e!="symbol"?e+"":e,i);const h="recordingStarted",p="recordingStopped",m="audio",v="mute",l="unmute";class g extends Event{constructor(e){super(m),this.data=e}}class S extends Event{constructor(){super(v)}}class w extends Event{constructor(){super(l)}}class T extends r{constructor(e){super(),this.workletScriptURL=e,a(this,"mediaStream"),a(this,"audioContext"),a(this,"inputSourceNode"),a(this,"analyserNode"),a(this,"workletProcessorNode")}get analyser(){return this.analyserNode}get isRecording(){return this.mediaStream?.active??!1}async startRecording(e){this.audioContext=e.audioContext;try{this.audioContext.state!=="running"&&await this.audioContext.resume()}catch(o){throw new E(this.audioContext,{cause:o})}try{await this.audioContext.audioWorklet.addModule(this.workletScriptURL)}catch(o){throw new f(this.workletScriptURL,o)}const i={echoCancellation:!0,noiseSuppression:!0,autoGainControl:!0,...e.recordingOptions??{}};this.mediaStream=await navigator.mediaDevices.getUserMedia({audio:{deviceId:e.deviceId,...i}}),this.inputSourceNode=this.audioContext.createMediaStreamSource(this.mediaStream),this.workletProcessorNode=new AudioWorkletNode(this.audioContext,"pcm-audio-processor"),this.workletProcessorNode.port.onmessage=o=>{const n=o.data;this.dispatchTypedEvent(m,new g(n))},this.inputSourceNode.connect(this.workletProcessorNode),this.workletProcessorNode.connect(this.audioContext.destination),this.analyserNode=this.audioContext.createAnalyser(),this.inputSourceNode.connect(this.analyserNode),this.dispatchTypedEvent(h,new Event(h))}mute(){if(this.mediaStream){for(const e of this.mediaStream.getTracks())e.enabled=!1;this.dispatchTypedEvent(v,new S)}}unmute(){if(this.mediaStream){for(const e of this.mediaStream.getTracks())e.enabled=!0;this.dispatchTypedEvent(l,new w)}}get isMuted(){return this.mediaStream?.getAudioTracks().some(e=>!e.enabled)??!1}stopRecording(){if(this.mediaStream){for(const e of this.mediaStream.getTracks())e.stop(),this.mediaStream?.removeTrack(e);this.workletProcessorNode?.port.postMessage("stop"),this.inputSourceNode?.disconnect(),this.workletProcessorNode?.disconnect(),this.mediaStream=void 0,this.inputSourceNode=void 0,this.analyserNode=void 0,this.audioContext=void 0,this.workletProcessorNode=void 0,this.dispatchTypedEvent(p,new Event(p))}}}class f extends Error{constructor(e,i){super(`Failed to register module from ${e}`,{cause:i}),this.name="AudioModuleRegistrationError"}}class E extends Error{constructor(e,i){super(`Could not resume audio context. Found in ${e.state} state`,i),this.name="AudioContextResumeError"}}s.AudioContextResumeError=E,s.AudioInputDevicesStore=u,s.AudioModuleRegistrationError=f,s.InputAudioEvent=g,s.MuteEvent=S,s.PCMRecorder=T,s.UnmuteEvent=w,s.getAudioDevicesStore=x});
